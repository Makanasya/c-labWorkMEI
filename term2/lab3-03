/*Напишите программу, которая сортирует массив целых чисел и определяет количество различных значений в нём.
Примеры
входные данные
6
5 2 1 3 5 2
выходные данные
1 2 2 3 5 5
4*/


#include <iostream>
#include <string>
#include <windows.h>
#include <iomanip>
#include <cmath>
#include <time.h>
using namespace std;
void QuickSort(int arr[], int right)
{
	int i = 0;							//устанавливаются границы в соответствии с переданными в функцию значениями (правая и левая границы/индексы)  
	int j = right;						//(например, в первой передаче это массив от индекса [0], т.е. левая граница=0 и правая граница массива =9)
	int pivot = arr[right / 2];			//устанавливается опорный элемент, который расположен в середине массива
	while (i <= j)						//во внешнем цикле проверяется не стал ли левый индекс больше чем правый 
	{
		while (arr[i] < pivot)			//пока элементы слева от опорного (середины массива) меньше чем значение опорного прибавляем к индексу 1, 
			i++;						//как только это станет не так переходим на следующую команду
		while (arr[j] > pivot)			//далее проверяем правую от середины (опорного элемента) часть массива: здесь отнимаем 1 если элемент больше опорного
			j--;
		
		if (i <= j)					//если граница все еще не сомкнулась (т.е. левый индекс меньше правого), то меняем местами "неправильно" стоящие, относительно опорного, элементы 
									//и сдвигаем границы внутрь	(правую вправо, левую влево)
		{
			swap(arr[i], arr[j]);
			i++;
			j--;
		}
	}

	//после всех вышеперечисленных манипуляций массив отсортирован относительно опорного элемента

	if (i < right)						//если текущий индекс левой границы массива меньше последнего индекса переданного массива (в первой передаче это размер массива-1), 
		QuickSort(arr + i, right - i);	//то снова сортируем в функции массив с параметрами (массив от элемента c индексом левой границы и правая граница =текущая правая граница минус индекс левой границы). По сути сортируем здесь правую часть (справа от опорного элемента) оставшегося массива
	if (j>0)
		QuickSort(arr, j);  //здесь сортируем левую часть
	
}

int main()
{
	setlocale(LC_ALL, "Rus");
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	const int N = 10;
	int a = 0, b = 10;
	srand(time(NULL));
	int arr[N];
	//заполнение массива случайными
	for (int& el : arr)
	{
		el = a + rand() % (b - a + 1);
		cout << setw(4) << el;
	}
	cout << endl;
	
	//Быстрая сортировка: в функцию передается исходный массив (указатель на первый элемент массива) и индекс последнего элемента в массиве
	QuickSort(arr, N-1);
	
	int kolvo = 0;
	for (int i = 0; i < N; i++)
	{
		if (arr[i] != arr[i + 1])
			kolvo++;
	}
	cout << kolvo << endl;

	//печать итогового массива
	for (int el : arr)
		cout << setw(4) << el;
	cout << endl;


	return 0;
}

